Main.js 1.4.0：2018/01/18

修改了onload启动Main的方式，让Main得以创建一个对象，现在是：
window.onload = function(event)
{
	new Main(event);
}

给Main添加静态属性instance，存储Main对象的引用。
因为进入主游戏循环时this已变为window，要想访问原来Main的属性和方法必须保存一个引用。
同时修改各个使用this调用Main属性和方法的地方的调用方式。现在是Main.instance.xxx。

添加属性exitFlag作为退出标志，同时整理mainLoop逻辑，保证需要退出时完全停止游戏循环。

====================
添加了主循环
以及esc 退出游戏
loop:
    if(this.gameViewer.updateFrame() === false){
        Main.prototype.exit();
    }
    this.gameViewer.collisionDetection();
    if(this.gameViewer.onRender() === false){
        Main.prototype.exit();
    }
    if(this.gameViewer.isSceneDone() === true){
        this.gameViewer.doScene();
    }
    if(this.gameViewer.isGameOver() === true){
        Main.prototype.exit();
    }
end


每次循环 
调用 updateFrame()进行行为更新

调用colisionDetection()进行Objects的碰撞检测。

onRender() 绘制所有要绘制的Objects。

isSceneDone() 如果当前场景结束，那么调用doScene() 进行场景间的处理

isGameOver() 如果游戏结束，退出循环

========================
给GameViewer 增加了下列接口


isSceneDonw()
返回是否当前场景结束
doScene()
两个场景之间的一些操作，并且要在最后调用setSceneState(true)

isGameOver()
返回是否游戏结束
setSceneState()
设置场景状态 true/false

collisionDetection()
碰撞检测。直接调用GameMap的processObjectHits() 

updateFrame()
所有更新游戏Objects行为的代码都放在这里。

==================
以及修改了一些其他的语法错误